#!/usr/bin/env bash
set -o errexit
set -o nounset
# set -o xtrace
set -o pipefail

eval "$(parse-options help:h -- "$@")"

if [[ $help ]]
then
	cat '/usr/share/gitaur/help/gitaur-pkgbuild'
else
	case $# in
		'0')
			PKGBUILD='PKGBUILD'
			VERSION=''
			;;
		'1')
			if [[ $(basename "$1") = 'PKGBUILD' ]]
			then
				PKGBUILD=$(realpath "$1")
				VERSION=''
			else
				PKGBUILD='PKGBUILD'
				VERSION=$1
			fi
			;;
		'2')
			PKGBUILD=$(realpath "$1")
			VERSION=$2
			;;
	esac

	if [[ $(basename "$PKGBUILD") != 'PKGBUILD' || ! -f $PKGBUILD ]]
	then
		echo 'Please specify a valid path to a PKGBUILD file' >&2
		exit 1
	fi

	if [[ $VERSION && ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+-[0-9]+$ ]]
	then
		echo 'Please specify a valid version' >&2
		exit 1
	fi

	cd "$(dirname "$PKGBUILD")"

	GITHUB_URL="$(hub browse -u)"
	GITHUB_NAME="${GITHUB_URL#*//*/}"
	GITHUB_METADATA="$(curl -s "https://api.github.com/repos/$GITHUB_NAME")"
	github() {
		echo "$GITHUB_METADATA" | jq -r "$1"
	}

	AUR_METADATA="$(aura -Ai "$(github '.name')")"
	aur() {
		echo "$AUR_METADATA" | awk "/$1/ {print \$3}"
	}

	maintainers() {
		local people=$(sed -n '/# Maintainer\|# Contributor/p' "$PKGBUILD")
		if [ -n "$people" ]
		then
			echo "$people"
		else
			hub shortlog -se | cut -c8- | sed 's/^/# Maintainer: /'
		fi
	}

	next_release() {
		local aur_version="$(aur 'Version' | grep -o '^[^-]*')"
		local aur_release="$(aur 'Version' | grep -o '[^-]*$')"
		if [ "$aur_version" = "$pkgver" ]
		then
			echo "$((aur_release + 1))"
		else
			echo '1'
		fi
	}

	parse_license() {
		FILE="$(dirname "$PKGBUILD")/LICENSE"
		TMP="$(mktemp -d)"
		cp "$FILE" "$TMP/target"
		LICENSE=$(ninka "$TMP/target" | awk -F ';' '{print $2}')
		rm -rf "$TMP"
		if [ -n "$LICENSE" ]
		then
			echo "$LICENSE" \
				| sed 's/GPLv/GPL/' \
				| sed 's/^MIT.*$/MIT/' \
				| sed 's/^BSD.*$/BSD/' \
				| sed 's/^Apache*$/Apache/' \
				| sed 's/^MPL.*$/MPL/' \
				| sed 's/^CPL.*$/CPL/' \
				| sed 's/^php*$/PHP/' \
				| sed 's/^W3C*$/W3C/'
		else
			exit 1
		fi
	}

	md5sums() {
		local tmp="$(mktemp -d)"
		{
			pa pkgname
			pa pkgver
			pa url
			pa source
		} > "$tmp/PKGBUILD"
		cd "$tmp"
		makepkg -g 2>/dev/null || echo 'md5sums=("SKIP")'
		rm -rf "$tmp"
	}

	stringify() {
		printf "$@" \
			| sed 's/\\ / /g' \
			| sed "/^url=/!s|$url|\$url|" \
			| sed "/^pkgname=/!s/$pkgname/\$pkgname/" \
			| sed "/^pkgver=/!s/$pkgver/\$pkgver/" \
			| sed "/^pkgrel=/!s/$pkgrel/\$pkgrel/"
	}

	ps() {
		if [[ -z ${!1:-} ]]
		then
			return
		fi
		stringify '%s="%q"\n' "$1" "${!1}"
	}

	pa() {
		local name="$1"
		if [[ -z ${!name:-} ]]
		then
			return
		fi

		local pattern=$name\[\@]
		eval set -- ${!pattern}
		if [ "${#@}" -eq 1 ]
		then
			stringify '%s=("%q")\n' "$name" "$1"
		elif [ "${#@}" -gt 1 ]
		then
			stringify '%s=(\n' "$name"
			stringify '\t"%q"\n' "$@"
			stringify ')\n'
		fi
	}

	pf() {
		declare -f "$1" || return 0
	}

	pkgname="$(github '.name')"
	if [[ $VERSION ]]
	then
		pkgver="$(echo "$VERSION" | cut -c2- | cut -d- -f1)"
		pkgrel="$(echo "$VERSION" | cut -d- -f2)"
	else
		pkgver="$(hub tag | sort -V | tail -1 | cut -c2- | cut -d- -f1)"
		pkgrel="$(next_release)"
	fi
	pkgdesc="$(github '.description')"
	arch=('any')
	url="$GITHUB_URL"
	license=("$(parse_license)")
	source=("$url/archive/v$pkgver-$pkgrel.tar.gz")
	build() {
		cd "$srcdir/$pkgname-$pkgver"
		[ -d 'doc' ] && clidoc doc/*.md
	}
	check() {
		cd "$srcdir/$pkgname-$pkgver"
		[ -d 'spec' ] && bats spec
	}
	package() {
		cd "$srcdir/$pkgname-$pkgver"
		[ -d 'bin' ] && install -Dm755 -t "$pkgdir/usr/bin" bin/*
		[ -d 'help' ] && install -Dm644 -t "$pkgdir/usr/share/$pkgname/help" help/*
		[ -f 'README.md' ] && install -Dm644 -t "$pkgdir/usr/share/doc/$pkgname" 'README.md'
		[ -d 'doc' ] && install -Dm644 -t "$pkgdir/usr/share/doc/$pkgname/doc" doc/*.md
		[ -f 'LICENSE' ] && install -Dm644 -t "$pkgdir/usr/share/licenses/$pkgname" 'LICENSE'
		[ -d 'man' ] && install -Dm644 -t "$pkgdir/usr/share/man/man1" man/*
	}

	eval "$(cat "$PKGBUILD")"

	maintainers
	ps pkgname
	ps pkgver
	ps pkgrel
	ps pkgdesc
	pa arch
	ps url
	pa license
	pa depends
	pa optdepends
	pa makedepends
	pa checkdepends
	pa provides
	pa conflicts
	pa backup
	pa options
	ps install
	ps changelog
	pa source
	pa noextract
	md5sums
	pf prepare
	pf build
	pf check
	pf package
fi
